import javax.swing.JOptionPane;
import java.util.*;

/**
 * GameLogic class handles the core logic of the Bulls and Cows game.
 *
 * It processes user guesses, counts bulls and cows, stores attempts,
 * and provides options to display the number of attempts or search previous attempts.
 */
public class GameLogic {
    private SecretNumber secretNumber; // The secret number generated by the computer
    private List<Attempt> attempts;    // List to store the user's attempts

    public GameLogic() {
        attempts = new ArrayList<>();
    }

    /**
     * Starts the game and manages the game loop.
     */
    public void startGame() {
        // Generate a new secret number at the beginning of each game
        secretNumber = new SecretNumber();
        attempts.clear();
        JOptionPane.showMessageDialog(null, "A new secret number has been generated. Start guessing!",
                "Bulls and Cows", JOptionPane.INFORMATION_MESSAGE);

        boolean guessedCorrectly = false;

        while (!guessedCorrectly) {
            String guessInput = JOptionPane.showInputDialog(null,
                    "Enter your guess (four distinct digits):", "Your Guess", JOptionPane.QUESTION_MESSAGE);

            if (guessInput == null) {
                // User clicked cancel or closed the dialog
                JOptionPane.showMessageDialog(null, "Game terminated by the user.", "Game Over",
                        JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);
            }

            // If the user types 'attempts', display the number of attempts made
            if (guessInput.equalsIgnoreCase("attempts")) {
                JOptionPane.showMessageDialog(null, "Number of attempts made: " + getAttempts(),
                        "Attempts", JOptionPane.INFORMATION_MESSAGE);
                continue;
            }

            // If the user types 'search', allow them to search previous attempts
            if (guessInput.equalsIgnoreCase("search")) {
                searchPreviousAttempts();
                continue;
            }

            // Validate the user's guess
            if (!isValidGuess(guessInput)) {
                JOptionPane.showMessageDialog(null, "Invalid input. Please enter four distinct digits.",
                        "Invalid Input", JOptionPane.ERROR_MESSAGE);
                continue;
            }

            // Create a new Attempt object to store the guess and results
            Attempt attempt = new Attempt(guessInput);

            // Count the number of bulls and cows
            int bulls = countBulls(secretNumber.getNumber(), attempt.getGuess());
            int cows = countCows(secretNumber.getNumber(), attempt.getGuess());

            // Set the bulls and cows counts in the attempt
            attempt.setBulls(bulls);
            attempt.setCows(cows);
            attempts.add(attempt); // Add the attempt to the list

            // Build the message to display
            StringBuilder message = new StringBuilder();
            message.append("Your Guess: ").append(guessInput)
                    .append("\nBulls: ").append(bulls)
                    .append("\nCows: ").append(cows)
                    .append("\n\nGuess History:\n");

            // Include the guess history with attempt numbers
            for (int i = 0; i < attempts.size(); i++) {
                Attempt att = attempts.get(i);
                message.append("Attempt ").append(i + 1).append(": ")
                        .append(att.getGuess()).append(" | Bulls: ")
                        .append(att.getBulls()).append(" | Cows: ")
                        .append(att.getCows()).append("\n");
            }

            // Show the message in a dialog box
            JOptionPane.showMessageDialog(null, message.toString(), "Result", JOptionPane.INFORMATION_MESSAGE);

            // Check if the user has guessed the secret number
            if (bulls == 4) {
                guessedCorrectly = true;
            }
        }
    }

    /**
     * Validates that the user's guess is a four-digit number with distinct digits.
     *
     * @param guess The user's input guess.
     * @return True if the guess is valid, false otherwise.
     */
    private boolean isValidGuess(String guess) {
        if (guess.length() != 4 || !guess.matches("\\d+")) {
            return false;
        }
        Set<Character> digits = new HashSet<>();
        for (char c : guess.toCharArray()) {
            digits.add(c);
        }
        return digits.size() == 4; // Ensure all digits are distinct
    }

    /**
     * Counts the number of bulls (digits correct in both value and position).
     *
     * @param secret The secret number generated by the computer.
     * @param guess  The user's guess.
     * @return The number of bulls.
     */
    private int countBulls(String secret, String guess) {
        int bulls = 0;
        for (int i = 0; i < secret.length(); i++) {
            // A bull is when the digit matches in both value and position
            if (secret.charAt(i) == guess.charAt(i)) {
                bulls++;
            }
        }
        return bulls;
    }

    /**
     * Counts the number of cows (digits correct in value but wrong position).
     *
     * @param secret The secret number generated by the computer.
     * @param guess  The user's guess.
     * @return The number of cows.
     */
    private int countCows(String secret, String guess) {
        int cows = 0;
        for (int i = 0; i < guess.length(); i++) {
            char guessChar = guess.charAt(i);
            // A cow is when the digit is in the secret number but in a different position
            if (secret.indexOf(guessChar) != -1 && secret.charAt(i) != guessChar) {
                cows++;
            }
        }
        return cows;
    }

    /**
     * Returns the number of attempts made by the user.
     *
     * @return The number of attempts.
     */
    public int getAttempts() {
        return attempts.size();
    }

    /**
     * Allows the user to search for matching strings in previous attempts.
     */
    private void searchPreviousAttempts() {
        String searchString = JOptionPane.showInputDialog(null,
                "Enter a string to search in previous attempts:", "Search Attempts", JOptionPane.QUESTION_MESSAGE);

        if (searchString == null) {
            // User clicked cancel or closed the dialog
            return;
        }

        StringBuilder matchingAttempts = new StringBuilder();
        for (Attempt attempt : attempts) {
            if (attempt.getGuess().contains(searchString)) {
                matchingAttempts.append("Guess: ").append(attempt.getGuess())
                        .append(" | Bulls: ").append(attempt.getBulls())
                        .append(" | Cows: ").append(attempt.getCows()).append("\n");
            }
        }

        if (matchingAttempts.length() == 0) {
            matchingAttempts.append("No matching attempts found.");
        }

        JOptionPane.showMessageDialog(null, matchingAttempts.toString(), "Search Results",
                JOptionPane.INFORMATION_MESSAGE);
    }
}
